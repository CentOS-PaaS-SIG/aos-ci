/**
 * CI Stage Pipeline Trigger
 *
 * This is a declarative pipeline for the CI stage pipeline
 * that includes the building of images based on PRs
 *
 */

// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'

// Defaults for SCM operations
env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/ci-pipeline'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

// If this PR does not include an image change, then use this tag
STABLE_LABEL = "stable"
def tagMap = [:]

// Initialize
tagMap['jenkins-continuous-infra-slave'] = STABLE_LABEL
tagMap['rpmbuild'] = STABLE_LABEL
tagMap['rsync'] = STABLE_LABEL
tagMap['ostree-compose'] = STABLE_LABEL
tagMap['package-test'] = STABLE_LABEL
tagMap['ostree-boot-image'] = STABLE_LABEL

// CI_MESSAGE known to build successfully
//def CANNED_CI_MESSAGE = '{"commit":{"username":"kdudka","stats":{"files":{"curl.spec":{"deletions":1,"additions":8,"lines":9},"0005-curl-7.53.1-CVE-2017-1000254.patch":{"deletions":0,"additions":136,"lines":136}},"total":{"deletions":1,"files":2,"additions":144,"lines":145}},"name":"Kamil Dudka","rev":"d1d232206aed8ef12596ec3939b72a6476845149","namespace":"rpms","agent":"kdudka","summary":"Resolves: CVE-2017-1000254 - fix out of bounds read in FTP PWD response parser","repo":"curl","branch":"f26","seen":false,"path":"/srv/git/repositories/rpms/curl.git","message":"Resolves: CVE-2017-1000254 - fix out of bounds read in FTP PWD response parser\n","email":"kdudka@redhat.com"},"topic":"org.fedoraproject.prod.git.receive"}'
def CANNED_CI_MESSAGE = '{"commit":{"username":"zdohnal","stats":{"files":{"README.patches":{"deletions":0,"additions":30,"lines":30},"sources":{"deletions":1,"additions":1,"lines":2},"vim.spec":{"deletions":7,"additions":19,"lines":26},".gitignore":{"deletions":0,"additions":1,"lines":1},"vim-8.0-rhbz1365258.patch":{"deletions":0,"additions":12,"lines":12}},"total":{"deletions":8,"files":5,"additions":63,"lines":71}},"name":"Zdenek Dohnal","rev":"3ff427e02625f810a2cedb754342be44d6161b39","namespace":"rpms","agent":"zdohnal","summary":"Merge branch \'f25\' into f26","repo":"vim","branch":"f26","seen":false,"path":"/srv/git/repositories/rpms/vim.git","message":"Merge branch \'f25\' into f26\\n","email":"zdohnal@redhat.com"},"topic":"org.fedoraproject.prod.git.receive"}'

library identifier: "ci-pipeline@${env.ghprbActualCommit}",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/${env.ghprbGhRepository}",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'stage-trigger-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Get Changelog") {
            steps {
                node('master') {
                    script {
                        echo "PR number is: ${env.ghprbPullId}"
                        env.changeLogStr = pipelineUtils.getChangeLogFromCurrentBuild()
                        echo env.changeLogStr
                    }
                    writeFile file: 'changelog.txt', text: env.changeLogStr
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'changelog.txt'
                }
            }
        }
        stage("jenkins-continuous-infra-slave image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/s2i/jenkins/slave/**"
            }
            steps {
                script {
                    tagMap['jenkins-continuous-infra-slave'] = pipelineUtils.buildImage(openshiftProject, "jenkins-continuous-infra-slave")
                }
            }
        }
        stage("rpmbuild image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/rpmbuild/**"
            }
            steps {
                script {
                    tagMap['rpmbuild'] = pipelineUtils.buildImage(openshiftProject, "rpmbuild")
                }
            }
        }
        stage("rsync image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/rsync/**"
            }
            steps {
                script {
                    tagMap['rsync'] = pipelineUtils.buildImage(openshiftProject, "rsync")
                }
            }
        }
        stage("ostree-compose image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/ostree_compose/**"
            }
            steps {
                script {
                    tagMap['ostree-compose'] = pipelineUtils.buildImage(openshiftProject, "ostree-compose")
                }
            }
        }
        stage("package-test image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/package-test/**"
            }
            steps {
                script {
                    tagMap['package-test'] = pipelineUtils.buildImage(openshiftProject, "package-test")
                }
            }
        }
        stage("ostree-boot-image image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/ostree-boot-image/**"
            }
            steps {
                script {
                    tagMap['ostree-boot-image'] = pipelineUtils.buildImage(openshiftProject, "ostree-boot-image")
                }
            }
        }
        stage("Run Stage Job") {
            steps {
                script {
                    // Use tags derived from above image builds
                    //
                    pipelineUtils.printLabelMap(tagMap)

                    def build = build job: 'ci-stage-pipeline-f26',
                            parameters: [
                                    string(name: 'CI_MESSAGE', value: CANNED_CI_MESSAGE),
                                    string(name: 'ghprbActualCommit', value: "${env.ghprbActualCommit}"),
                                    string(name: 'ghprbGhRepository', value: "${env.ghprbGhRepository}"),
                                    string(name: 'sha1', value: "${env.sha1}"),
                                    string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbPullAuthorLogin', value: "${env.ghprbPullAuthorLogin}"),
                                    string(name: 'SLAVE_TAG', value: tagMap['jenkins-continuous-infra-slave']),
                                    string(name: 'RPMBUILD_TAG', value: tagMap['rpmbuild']),
                                    string(name: 'RSYNC_TAG', value: tagMap['rsync']),
                                    string(name: 'OSTREE_COMPOSE_TAG', value: tagMap['ostree-compose']),
                                    string(name: 'PACKAGE_TEST_TAG', value: tagMap['package-test']),
                                    string(name: 'OSTREE_BOOT_IMAGE_TAG', value: tagMap['ostree-boot-image'])
                            ]
                    wait: true
                }
            }
        }
    }
    post {
        success {
            echo "yay!"
        }
        failure {
            error "build failed!"
        }
    }
}
